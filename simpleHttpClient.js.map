{"version":3,"file":"simpleHttpClient.js","sourceRoot":"","sources":["../simpleHttpClient.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;GAaG;AACH,mCAAgC;AAChC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAElB,QAAA,uBAAuB,GAAQ,EAAE,CAAC;AAC/C,+BAAuB,CAAC,SAAS,GAAG,UAAS,MAAM;IACjD,SAAS,yBAAyB,CAAC,WAAW;QAC5C,gEAAgE;QAChE,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC;SACX;QAED,IAAI,oBAAoB,GAAG,EAAE,CAAC;QAC9B,KAAK,MAAM,QAAQ,IAAI,WAAW,EAAE;YAClC,IAAI,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBACxC,oBAAoB,IAAI,kBAAkB,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC;aAC9G;SACF;QAED,OAAO,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAE,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,MAAM,gBAAgB,GAAQ,EAAE,CAAC;IACjC,gBAAgB,CAAC,QAAQ,GAAG,aAAK,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAE7E,gBAAgB,CAAC,WAAW,GAAG,UAAS,OAAO;QAC7C,MAAM,IAAI,GAAG,aAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvD,MAAM,IAAI,GAAG,aAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvD,IAAI,WAAW,GAAG,aAAK,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClD,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,WAAW,GAAG,EAAE,CAAC;SAClB;QACD,IAAI,OAAO,GAAG,aAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,4EAA4E;QAC5E,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,SAAS,EAAE;YACzC,OAAO,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,kBAAkB,CAAC;SACrD;QAED,2EAA2E;QAC3E,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;YACnC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;SAC9C;QAED,IAAI,IAAI,GAAG,aAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,GAAG,EAAE,CAAC;SACX;QAED,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACjC,MAAM,WAAW,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAI,WAAW,KAAK,EAAE,EAAE;YACtB,GAAG,IAAI,GAAG,GAAG,WAAW,CAAC;SAC1B;QACD,MAAM,iBAAiB,GAAG;YACxB,MAAM,EAAE,IAAI;YACZ,GAAG,EAAE,GAAG;YACR,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,IAAI;SACX,CAAC;QACF,OAAO,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAClC,CAAC,CAAC;IACF,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nimport { utils } from './utils';\nconst axios = require('axios');\n\nexport const simpleHttpClientFactory: any = {};\nsimpleHttpClientFactory.newClient = function(config) {\n  function buildCanonicalQueryString(queryParams) {\n    //Build a properly encoded query string from a QueryParam object\n    if (Object.keys(queryParams).length < 1) {\n      return '';\n    }\n\n    let canonicalQueryString = '';\n    for (const property in queryParams) {\n      if (queryParams.hasOwnProperty(property)) {\n        canonicalQueryString += encodeURIComponent(property) + '=' + encodeURIComponent(queryParams[property]) + '&';\n      }\n    }\n\n    return canonicalQueryString.substr(0, canonicalQueryString.length - 1);\n  }\n\n  const simpleHttpClient: any = {};\n  simpleHttpClient.endpoint = utils.assertDefined(config.endpoint, 'endpoint');\n\n  simpleHttpClient.makeRequest = function(request) {\n    const verb = utils.assertDefined(request.verb, 'verb');\n    const path = utils.assertDefined(request.path, 'path');\n    let queryParams = utils.copy(request.queryParams);\n    if (queryParams === undefined) {\n      queryParams = {};\n    }\n    let headers = utils.copy(request.headers);\n    if (headers === undefined) {\n      headers = {};\n    }\n\n    //If the user has not specified an override for Content type the use default\n    if (headers['Content-Type'] === undefined) {\n      headers['Content-Type'] = config.defaultContentType;\n    }\n\n    //If the user has not specified an override for Accept type the use default\n    if (headers['Accept'] === undefined) {\n      headers['Accept'] = config.defaultAcceptType;\n    }\n\n    let body = utils.copy(request.body);\n    if (body === undefined) {\n      body = '';\n    }\n\n    let url = config.endpoint + path;\n    const queryString = buildCanonicalQueryString(queryParams);\n    if (queryString !== '') {\n      url += '?' + queryString;\n    }\n    const simpleHttpRequest = {\n      method: verb,\n      url: url,\n      headers: headers,\n      data: body\n    };\n    return axios(simpleHttpRequest);\n  };\n  return simpleHttpClient;\n};\n"]}